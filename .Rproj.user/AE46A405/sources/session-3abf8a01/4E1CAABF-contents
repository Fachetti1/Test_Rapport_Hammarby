---
title: ""
params:
  player_name: ""
  image_url: ""
  test_data: NULL
  logo_url: "https://cdn03.svenskalag.se/img/headers/special_hammarbyhandboll-2019.jpg?2"
output: 
  html_document:
    css: Null
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
library(gridExtra)
library(lubridate)
```

<style>
body, html {
    margin: 0;
    padding: 0;
}

.logo-container {
    width: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
}

.logo {
    width: 100%;
    height: auto;
    display: block;
    max-width: none;
}

.content-container {
    padding: 20px;
}

.header-container {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.header-image {
  width: 150px;
  height: 150px;
  object-fit: cover;
  object-position: center top;
  border-radius: 10px;
  margin-right: 20px;
}

.header-title {
  font-size: 24px;
  color: #333;
}
</style>
<div class="logo-container">
  <img src="`r params$logo_url`" alt="Hammarby Handboll Logo" class="logo">
</div>

```{r player-header, echo=FALSE, results='asis'}
cat(paste0('<div class="header-container">
  <img src="', params$image_url, '" alt="', params$player_name, '" class="header-image">
  <h1 class="header-title">Test Rapport ', params$player_name, '</h1>
</div>'))
```
 

```{r data_prep, echo=FALSE}
if (is.null(params$test_data)) {
  stop("No test data provided. Please ensure that test data is correctly loaded.")
}

player_data <- params$test_data %>% filter(Namn == params$player_name)

if (nrow(player_data) == 0) {
  stop(paste("No data found for player:", params$player_name))
}

team_averages <- test_data_clean %>%
  group_by(Lag) %>%
  summarise(across(c(Bänkpress, Knäböj, Frivändning, Cooper_seconds), 
                   list(mean = ~mean(., na.rm = TRUE)), 
                   .names = "{.col}_mean"))

cooper_to_seconds <- function(time_str) {
  if (is.na(time_str)) return(NA)
  tryCatch({
    if (is.character(time_str) && grepl(":", time_str)) {
      parts <- strsplit(time_str, ":")[[1]]
      as.numeric(parts[1]) * 60 + as.numeric(parts[2])
    } else {
      as.numeric(time_str)
    }
  }, error = function(e) NA)
}

format_time <- function(seconds) {
  if (is.na(seconds) || !is.finite(seconds)) return("N/A")
  minutes <- floor(seconds / 60)
  remaining_seconds <- round(seconds %% 60)
  sprintf("%d:%02d", minutes, remaining_seconds)
}
```

```{r results_table, echo=FALSE}
results <- player_data %>% 
  select(Bänkpress, Knäböj, Frivändning, Cooper_formatted) %>%
  rename(`Bench Press (kg)` = Bänkpress,
         `Squat (kg)` = Knäböj,
         `Clean (kg)` = Frivändning,
         `Cooper Test` = Cooper_formatted)

kable(results, align = 'c')
```

Here are `r params$player_name`'s results for each test, along with team statistics:

# Test Datum

```{r date_table, echo=FALSE}
player_team_avg <- team_averages %>% filter(Lag == player_data$Lag[1])
comparison <- data.frame(
  Test = c("Bench Press (kg)", "Squat (kg)", "Clean (kg)", "Cooper Test"),
  Player = c(player_data$Bänkpress, player_data$Knäböj, player_data$Frivändning, player_data$Cooper_formatted),
  `Team Average` = c(round(player_team_avg$Bänkpress_mean, 1), 
                     round(player_team_avg$Knäböj_mean, 1), 
                     round(player_team_avg$Frivändning_mean, 1), 
                     format_time(player_team_avg$Cooper_seconds_mean))
)

kable(comparison, align = 'c')
```

# Performance Visualization

```{r strength_charts, echo=FALSE, fig.width=12, fig.height=12, warning=FALSE, message=FALSE}
player_team_avg <- team_averages %>% filter(Lag == player_data$Lag[1])
other_team_avg <- team_averages %>% filter(Lag != player_data$Lag[1])

strength_data <- data.frame(
  Test = rep(c("Bench Press", "Squat", "Clean"), 3),
  Value = c(player_data$Bänkpress, player_data$Knäböj, player_data$Frivändning,
            player_team_avg$Bänkpress_mean, player_team_avg$Knäböj_mean, player_team_avg$Frivändning_mean,
            other_team_avg$Bänkpress_mean, other_team_avg$Knäböj_mean, other_team_avg$Frivändning_mean),
  Type = rep(c("Player", paste(player_data$Lag[1], "Average"), 
               paste(other_team_avg$Lag[1], "Average")), each = 3)
)

strength_plot <- ggplot(strength_data, aes(x = Test, y = Value, fill = Type)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = round(Value, 1)), vjust = -0.5, position = position_dodge(0.9)) +
  labs(title = "Strength Tests Comparison", y = "Weight (kg)") +
  theme_minimal() +
  scale_fill_manual(values = c("Player" = "skyblue", 
                               "A-Pojk Average" = "orange", 
                               "HU Average" = "green"))

print(strength_plot)
```

```{r cooper_charts, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE, message=FALSE}
cooper_data <- data.frame(
  Person = c(params$player_name, 
             paste(player_data$Lag[1], "Average"),
             paste(other_team_avg$Lag[1], "Average")),
  Time = c(player_data$Cooper_seconds, 
           player_team_avg$Cooper_seconds_mean,
           other_team_avg$Cooper_seconds_mean)
)

cooper_plot <- ggplot(cooper_data, aes(x = Person, y = Time, fill = Person)) +
  geom_bar(stat = "identity", width = 0.5) +
  geom_text(aes(label = sapply(Time, format_time)), vjust = -0.5, color = "black") +
  scale_fill_manual(values = c("skyblue", "orange", "green")) +
  labs(title = "Cooper Test Results", y = "Time (minutes:seconds)") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5)) +
  scale_y_continuous(breaks = seq(0, max(cooper_data$Time, na.rm = TRUE), by = 60),
                     labels = function(x) sapply(x, format_time))

print(cooper_plot)
```

# Kravprofil Comparison

```{r kravprofil_comparison, echo=FALSE, warning=FALSE, message=FALSE}
# Define the kravprofil data (using absolute values for strength tests)
kravprofil <- data.frame(
  Test = c("Knäböj", "Bänkpress", "Frivändning", "Cooper"),
  `1` = c(110, 75, 75, 13.15),
  `2` = c(122, 82, 82, 12.58),
  `3` = c(133, 89, 89, 12.41),
  `4` = c(144, 96, 96, 12.24),
  `5` = c(155, 104, 104, 12.07),
  `6` = c(166, 111, 111, 11.50),
  `7` = c(177, 118, 118, 11.33),
  `8` = c(188, 125, 125, 11.17),
  `9` = c(199, 133, 133, 11.01),
  `10` = c(210, 140, 140, 10.45)
)

# Function to calculate score based on kravprofil
calculate_score <- function(test, value) {
  if (is.na(value)) return(NA)
  
  test_row <- kravprofil[kravprofil$Test == test, ]
  if (nrow(test_row) == 0) return(NA)
  
  if (test == "Cooper") {
    score <- which(value >= test_row[2:11])[1]
  } else {
    score <- which(value <= test_row[2:11])[1]
  }
  
  if (is.na(score)) {
    if ((test == "Cooper" && value < test_row$`10`) || 
        (test != "Cooper" && value > test_row$`10`)) {
      return(10)
    } else {
      return(1)
    }
  }
  return(11 - score)
}

# Calculate scores for the player
player_scores <- data.frame(
  Test = c("Knäböj", "Bänkpress", "Frivändning", "Cooper"),
  Value = c(
    selected_data$Knäböj,
    selected_data$Bänkpress,
    selected_data$Frivändning,
    as.numeric(substr(selected_data$Cooper, 1, 2)) + as.numeric(substr(selected_data$Cooper, 4, 5)) / 60
  )
)

player_scores$Score <- mapply(calculate_score, player_scores$Test, player_scores$Value)

# Create a table with the results
kable(player_scores, col.names = c("Test", "Value", "Score"), 
      caption = paste(params$player_name, "- Kravprofil Scores"))

# Visualize the scores
ggplot(player_scores, aes(x = Test, y = Score)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  geom_text(aes(label = Score), vjust = -0.5) +
  ylim(0, 10) +
  labs(title = paste(params$player_name, "- Kravprofil Scores"),
       y = "Score") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

The Kravprofil comparison shows how `r params$player_name`'s performance compares to the requirement profile for male handball players. Scores range from 1 to 10, with higher scores indicating better performance relative to the requirements. Note that for strength tests (Knäböj, Bänkpress, Frivändning), absolute values are used instead of relative to body weight.

## Full Kravprofil Reference

For a complete understanding of the performance requirements, please refer to the full Kravprofil document below:

```{r kravprofil_pdf, echo=FALSE, fig.align='center', out.width='100%'}
knitr::include_graphics("kravprofil-fysprofil-sok-herrar-handboll-2020-02-06.pdf")
```

This document provides a comprehensive view of the performance requirements for various physical tests in men's handball. The scores range from 1 to 10, with 10 representing the highest level of performance. Use this reference to interpret the player's scores and identify areas for improvement.

</div>
